#include <stdio.h>
#include <stdlib.h>
#include <conio.h>  
#include <windows.h> 



struct tetris_level {
    int score;
    int nsec;
};

struct tetris {
    char **game;
    int w;
    int h;
    int level;
    int gameover;
    int score;
    struct tetris_block {
        char data[5][5];
        int w;
        int h;
        char block_char; 
    } current;
    int x;
    int y;
};


struct tetris_block blocks[] =
{
    {{"##", 
      "##"},
    2, 2, '@'}, 

    {{" XX",
      "XXX"},
    3, 2, 'T'},  
    
    {{"@@@@@"}, 
     5, 1, '-'}, 
    
    {{"OO",
      "O ",
      "O "},
    2, 3, 'L'}, 
    
    {{"&&",
      " &",
      " &"},
    2, 3, 'J'}, 
    
    {{"ZZ ",
      " ZZ"},
    3, 2, 'Z'}, 
    
    {{"XXX",
      " X "},
    3, 2, 'C'}, 
    
    {{"$$$",
      "$$$",
      "$$$"},
    3, 3, 'B'}  
};

struct tetris_level levels[] =
{
    {0, 1200000},
    {1500, 900000},
    {8000, 700000},
    {20000, 500000},
    {40000, 400000},
    {75000, 300000},
    {100000, 200000}
};z;

int TETRIS_PIECES = sizeof(blocks) / sizeof(struct tetris_block);
int TETRIS_LEVELS = sizeof(levels) / sizeof(struct tetris_level);




void tetris_init(struct tetris *t, int w, int h) {
    int x, y;
    t->level = 1;
    t->score = 0;
    t->gameover = 0;
    t->w = w;
    t->h = h;
    t->game = malloc(sizeof(char *)*w);
    for (x = 0; x < w; x++) {
        t->game[x] = malloc(sizeof(char) * h);
        for (y = 0; y < h; y++)
            t->game[x][y] = ' ';
    }
}

void tetris_clean(struct tetris *t) {
    int x;
    for (x = 0; x < t->w; x++) {
        free(t->game[x]);
    }
    free(t->game);
}

void tetris_print(struct tetris *t) {
    int x, y;
    system("cls"); 
    printf("[LEVEL: %d | SCORE: %d]\n", t->level, t->score);
    for (x = 0; x < 2 * t->w + 2; x++)
        printf("~");
    printf("\n");
    for (y = 0; y < t->h; y++) {
        printf("!");
        for (x = 0; x < t->w; x++) {
            if (x >= t->x && y >= t->y 
                && x < (t->x + t->current.w) && y < (t->y + t->current.h) 
                && t->current.data[y - t->y][x - t->x] != ' ') {
                printf("%c ", t->current.block_char); 
            } else {
                printf("%c ", t->game[x][y]);
            }
        }
        printf("!\n");
    }
    for (x = 0; x < 2 * t->w + 2; x++)
        printf("~");
    printf("\n");
}

int tetris_hittest(struct tetris *t) {
    int x, y, X, Y;
    struct tetris_block b = t->current;
    for (x = 0; x < b.w; x++)
        for (y = 0; y < b.h; y++) {
            X = t->x + x;
            Y = t->y + y;
            if (X < 0 || X >= t->w)
                return 1;
            if (b.data[y][x] != ' ') {
                if ((Y >= t->h) || 
                    (X >= 0 && X < t->w && Y >= 0 && t->game[X][Y] != ' ')) {
                    return 1;
                }
            }
        }
    return 0;
}

void tetris_new_block(struct tetris *t) {
    t->current = blocks[rand() % TETRIS_PIECES];
    t->x = (t->w / 2) - (t->current.w / 2);
    t->y = 0;
    if (tetris_hittest(t)) {
        t->gameover = 1;
    }
}

void tetris_rotate(struct tetris *t) {
    struct tetris_block b = t->current;
    struct tetris_block s = b;
    int x, y;
    b.w = s.h;
    b.h = s.w;
    for (x = 0; x < s.w; x++)
        for (y = 0; y < s.h; y++) {
            b.data[x][y] = s.data[s.h - y - 1][x];
        }
    int x_pos = t->x;
    int y_pos = t->y;
    t->x -= (b.w - s.w) / 2;
    t->y -= (b.h - s.h) / 2;
    t->current = b;
    if (tetris_hittest(t)) {
        t->current = s;
        t->x = x_pos;
        t->y = y_pos;
    }
}

void tetris_gravity(struct tetris *t) {
    t->y++;
    if (tetris_hittest(t)) {
        t->y--; 
        for (int x = 0; x < t->current.w; x++) {
            for (int y = 0; y < t->current.h; y++) {
                if (t->current.data[y][x] != ' ') {
                    t->game[t->x + x][t->y + y] = t->current.block_char;
                }
            }
        }
        tetris_new_block(t);
    }
}

void tetris_run(int w, int h) {
    struct tetris t;
    tetris_init(&t, w, h);
    tetris_new_block(&t);

    while (!t.gameover) {
        tetris_print(&t);

        if (kbhit()) {
            char cmd = getch(); 
            switch (cmd) {
                case 'a':
                    t.x--;
                    if (tetris_hittest(&t))
                        t.x++;
                    break;
                case 'd':
                    t.x++;
                    if (tetris_hittest(&t))
                        t.x--;
                    break;
                case 'w':
                    tetris_rotate(&t);
                    break;
            }
        }

       
        Sleep(300); 
        tetris_gravity(&t);
    }

    tetris_print(&t);
    printf("*** GAME OVER ***\n");

    tetris_clean(&t);
}

int main(void) {
    tetris_run(12, 15);
    return EXIT_SUCCESS;
}
